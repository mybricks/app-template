// @ts-check
const fs = require('fs')
const pt = require('path')

function getEntryCfg (pkgPath, configPath) {

  const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'))

  const cfg = {
    comAry: [],
    // libPath: docPath,
    libName: pkg.name,
    debugger: "pc-spa",
    libVersion: pkg.version,
    description: pkg.description
  };

  if (fs.existsSync(configPath)) {
    const cfgJson = JSON.parse(fs.readFileSync(configPath, 'utf-8'))

    Object.assign(cfg, cfgJson);
  };

  return cfg;
}

function getNodeType (value) {
	switch (typeof value) {
		case 'boolean': return 'boolean';
		case 'number': return 'number';
		case 'string': return 'string';
		case 'object': {
			if (!value) {
				return 'null';
			} else if (Array.isArray(value)) {
				return 'array';
			}
			return 'object';
		}
		default: return 'null';
	}
};

const opIsArray = Array.isArray

const opToString = Object.prototype.toString

function initEditJS ({libName, libVersion, description, dependencies}) {
  const editJS = `
    const _styleAry = [];
    const _headAppendChild = document.head.appendChild;
    document.head.appendChild = (ele) => {
      if (ele && ele.tagName?.toLowerCase() === 'style') {
        _styleAry.push(ele);
      };
      _headAppendChild.call(document.head, ele);
      return ele;
    };
    let comlibEdt = window["__comlibs_edit_"];
    if(!comlibEdt){
      comlibEdt = window["__comlibs_edit_"] = [];
    }
    const comAray = []
    comlibEdt.push({
      id: "${libName}",
      title: "${description}",
      version: "${libVersion}",
      dependencies: ${JSON.stringify(dependencies || [])},
      comAray,
      _styleAry
    })
    let comDef;
  `;

  return editJS;
}

function initRuntimeJS ({libName, libVersion, description}) {
  let rtJS = `
    let comlibRT = window['__comlibs_rt_'];
    if(!comlibRT){
      comlibRT = window['__comlibs_rt_'] = [];
    }
    const comAray = [];
    comlibRT.push({
      id: "${libName}",
      title: "${description}",
      version: "${libVersion}",
      comAray
    });
    let comDef;
  `;

  return rtJS;
}

function scanComJson (docPath, comAry, arrPath = [], singleComs = []) {
  let editJS = ''
  let rtJS = ''

  for (const [index, com] of comAry.entries()) {
    const type = opToString.call(com);

    if (type === '[object String]') {
      const comJsonPath = pt.join(docPath, com)
      const comPath = pt.join(comJsonPath, '../')
      const comJson = JSON.parse(fs.readFileSync(comJsonPath, 'utf-8'))

      const { rtJS: comRtJS, editJS: comEditJS } = getComString(comJson, comPath, comJsonPath, arrPath, singleComs)

      editJS = editJS + comEditJS
      rtJS = rtJS + comRtJS
    } else if (type === '[object Object]') {
      const {
        icon,
        type,
        title,
        comAry,
        visible
      } = com
      const { rtJS: comRtJS, editJS: comEditJS } = scanComJson(docPath, comAry, [...arrPath, `[${index}].comAray`], singleComs)

      editJS = editJS + `comAray${arrPath.join("")}.push({icon:"${icon}",title:"${title}",comAray:[],type:"${type}",visible:${visible === false ? false : true}});`
      editJS = editJS + comEditJS

      rtJS = rtJS + `comAray${arrPath.join("")}.push({icon:"${icon}",title:"${title}",comAray:[],type:"${type}",visible:${visible === false ? false : true}});`
      rtJS = rtJS + comRtJS
    }
  }

  return {
    rtJS,
    editJS,
    singleComs
  }
}

function getComString (com, comPath, comJsonPath, arrPath = [], singleComs = []) {
  let editStr = ''
  let rtStr = ''

  const {
    icon,
    data,
    version,
    upgrade,
    editors,
    preview,
    runtime,
    namespace
  } = com

  let runtimePath

  try {
    runtimePath = pt.join(comPath, runtime)
  } catch (e) {}

  // 没有runtime或namespace直接跳过即可
  if (runtimePath && namespace) {
    if (fs.existsSync(runtimePath)) {
      // 图标处理
      if (icon && !`${icon}`.startsWith("http") && !`${icon}`.startsWith("data:image")) {
        const iconPath = pt.join(comPath, icon)
        const imgUri = imgToDataUri(iconPath)

        if (imgUri) {
          com.icon = imgUri
        }
      }

      // 预览处理
      if (preview && !/(\.(js|ts|jsx|tsx)$)|(^http)/.test(preview)) {
        const iconPath = pt.join(comPath, preview)
        const imgUri = imgToDataUri(iconPath)

        if (imgUri) {
          com.preview = imgUri
        }
      }

      editStr = editStr + 
        `comDef = ${JSON.stringify(com)};\n` +
        `comDef.runtime = require("${runtimePath}").default;\n`
      rtStr = rtStr + `
        comDef = {
          namespace: "${namespace}",
          version: "${version}",
          runtime: require("${runtimePath}").default
        };\n
      `

      try {
        const editorsPath = pt.join(comPath, editors)

        if (fs.existsSync(editorsPath)) {
          editStr = editStr + `comDef.editors = require("${editorsPath}").default;\n`
        }
      } catch (e) {}

      try {
        const dataPath = pt.join(comPath, data)

        if (fs.existsSync(dataPath)) {
          editStr = editStr + `comDef.data = require("${dataPath}");\n`
        }
      } catch (e) {}

      try {
        const upgradePath = pt.join(comPath, upgrade)

        if (fs.existsSync(upgradePath)) {
          editStr = editStr + `comDef.upgrade = require("${upgradePath}").default;\n`
        }
      } catch (e) {}

      try {
        const runtimeEditPath = pt.join(comPath, com['runtime.edit'])

        if (fs.existsSync(runtimeEditPath)) {
          editStr = editStr + `comDef['runtime.edit'] = require("${runtimeEditPath}").default;\n`
        }
      } catch (e) {}

      
      if (/\.(js|ts|jsx|tsx)$/.test(preview)) {
        try {
          const previewPath = pt.join(comPath, preview)

          if (fs.existsSync(previewPath)) {
            editStr = editStr + `comDef.preview = require("${previewPath}").default;\n`
          }
        } catch (e) {}
      } else if (/^http/.test(preview)) {
        editStr = editStr + `comDef.preview = "${preview}";\n`
      }

      singleComs.push({id: namespace, comJsonPath, editCode: `let comDef;${editStr}export default comDef;`, runtimeCode: `let comDef;${editStr}export default comDef;`})

      editStr = editStr + `comAray${arrPath.join("")}.push(comDef);\n`
      rtStr = rtStr + `comAray${arrPath.join("")}.push(comDef);\n`
    }
  }

  return { rtJS: rtStr, editJS: editStr }
}

function imgToDataUri (imgPath) {
  let uri = ''
  let hasImgFile

  if (fs.existsSync(imgPath)) {
    hasImgFile = fs.readFileSync(imgPath)
  }

  switch (true) {
    case !hasImgFile:
      console.error(`${imgPath}：未找到图片`)
      break
    case imgPath.endsWith('.svg'):
      uri = svgImgToDataUri(imgPath)
      break
    default:
      uri = imgToBase64(imgPath)
      break
  }

  return uri
}

function svgImgToDataUri (imgPath) {
  const imgFile = fs.readFileSync(imgPath, 'utf8')

  return 'data:image/svg+xml,' + encodeURIComponent(imgFile)
}

function imgToBase64 (imgPath) {
  const imgFile = fs.readFileSync(imgPath)
  const base64data = imgFile.toString('base64')

  return 'data:image/png;base64,' + base64data
}

const IS = {
  isDefined: v => v !== undefined,
  isObject: v => v !== null && v !== undefined && typeof v === 'object' && !Array.isArray(v),
  isBoolean: v => v === true || v === false,
  isNumber: v => v !== undefined && (typeof v === 'number' || v instanceof Number) && isFinite(v),
  isString: v => v !== null && v !== undefined && (typeof v === 'string' || v instanceof String),
  isArray: v => Array.isArray(v),
  isFunction: v => typeof v === 'function'
};

module.exports = {
  IS,
  opIsArray,
  opToString,
  initEditJS,
  getEntryCfg,
  scanComJson,
  getNodeType,
  getComString,
  initRuntimeJS
}
